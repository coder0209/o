SJF:#include <stdio.h>

struct proc {
    int at, bt, tat, wt, ct, completed;
};

int main() {
    int n, i;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct proc process[30];

    // Input arrival time and burst time
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        printf("Enter Arrival Time: ");
        scanf("%d", &process[i].at);
        printf("Enter Burst Time: ");
        scanf("%d", &process[i].bt);
        process[i].completed = 0; 
    }

    int cur = 0;  
    int completed = 0;  
    while (completed < n) {
        int idx = -1;
        int min_bt = 999;  
        
        for (int i = 0; i < n; i++) {
            if (process[i].at <= cur && !process[i].completed && process[i].bt < min_bt) {
                min_bt = process[i].bt;
                idx = i;
            }
        }

        if (idx == -1) {
            cur++;
            continue;
        }

        process[idx].ct = cur + process[idx].bt;
        process[idx].tat = process[idx].ct - process[idx].at;
        process[idx].wt = process[idx].tat - process[idx].bt;
        process[idx].completed = 1; 

        cur = process[idx].ct;  
        completed++;
    }

    printf("Process\tAT\tBT\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n", i + 1, process[i].at, process[i].bt, process[i].ct, process[i].tat, process[i].wt);
    }

    // Gantt Chart
    printf("GANTT CHART\n");
    printf("0");
    for (i = 0; i < n; i++) {
        printf("------");
    }
    printf("\n");

    for (i = 0; i < n; i++) {
        printf("P%d ", i + 1);
    }
    printf("\n");

    for (i = 0; i < n; i++) {
        printf("------");
    }
    printf("\n");

    printf("0");
    for (i = 0; i < n; i++) {
        printf("   %d", process[i].ct);
    }
    printf("\n");

    return 0;
}

SRTF:#include<stdio.h>
#include<limits.h>
struct proc
{
    int at,bt,ct,tat,wt,complete;
};
int main()
{
    int n,i;
    float totaltat=0,totalwt=0;
    struct proc process[30];
    printf("enter no of process:");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        printf("Process%d:\n",i+1);
        printf("Enter arrival time for %d:",i+1);
        scanf("%d",&process[i].at);
         printf("Enter burst time for %d:",i+1);
        scanf("%d",&process[i].bt);
        process[i].complete=0;
    }
    int cur=0;
    int compete=0;
    int remaining_bt[30];
    for(i=0;i<n;i++)
    {
        remaining_bt[i]=process[i].bt;
    }
    while(compete<n)
    {
        int idx=-1;
        int min_bt=INT_MAX;
        for(i=0;i<n;i++)
        {
            if(process[i].at<=cur&&process[i].complete==0&&remaining_bt[i]<=min_bt)
            {
                min_bt=remaining_bt[i];
                idx=i;
            }
        }
            if(idx==-1)
            {
                cur++;
                continue;
            }
            remaining_bt[idx]--;
            cur++;
            if(remaining_bt[idx]==0)
            {
                 process[idx].complete=1;
                compete++;
                process[idx].ct=cur;
                process[idx].tat=process[idx].ct-process[idx].at;
                process[idx].wt=process[idx].tat-process[idx].bt;
               
            }
    }
     printf("Process\tAT\tBT\tCT\tTAT\tWT\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n", i + 1, process[i].at, process[i].bt, process[i].ct, process[i].tat, process[i].wt);
    }
    for(i=0;i<n;i++)
    {
        totaltat=totaltat+process[i].tat;
        totalwt=totalwt+process[i].wt;
    }
    printf("Average tat=%f\n",totaltat/n);
      printf("Average wt=%f\n",totalwt/n);
    
printf("GANTT CHART\n");
    printf("0");
    for ( i = 0; i < n; i++) {
        printf("------");
    }
    printf("\n");

    for (i = 0; i < n; i++) {
        printf("P%d ", i + 1);
    }
    printf("\n");

    for ( i = 0; i < n; i++) {
        printf("------");
    }
    printf("\n");

    printf("0");
    for (i = 0; i < n; i++) {
        printf("   %d", process[i].ct);
    }
    printf("\n");


    return 0;
}

RR:#include<stdio.h>
struct proc
{
    int pid,at,bt,ct,tat,wt,rem_bt;
};
int main()
{
    int n,tq,i;
    struct proc process[30];
    printf("Enter no of process:");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        printf("Process %d:\n");
        printf("enter arrival time:");
        scanf("%d",&process[i].at);
        printf("enter burst time:");
        scanf("%d",&process[i].bt);
        process[i].rem_bt=process[i].bt;
        process[i].tat=0;
        process[i].wt=0;
        process[i].ct=0;
    }
    int currenttime=0;
    int remainingprocess=n;
    printf("enter time quantum:");
    scanf("%d",&tq);
    while(remainingprocess>0)
    {
        int processdone=0;
    
    for(i=0;i<n;i++)
    {
        if(process[i].rem_bt>0&&process[i].at<=currenttime)
        {
            processdone=1;
            int exec_time;
            if(process[i].rem_bt>tq)
            {
                exec_time=tq;
            }
            else
            {
                exec_time=process[i].rem_bt;
            }
            currenttime+=exec_time;
            process[i].rem_bt-=exec_time;
            if(process[i].rem_bt==0)
            {
                process[i].ct=currenttime;
                process[i].tat=process[i].ct-process[i].at;
                process[i].wt=process[i].tat-process[i].bt;
             remainingprocess--;
            }
        }
    }
    }
    float totaltat=0,totalwt=0;
    for(i=0;i<n;i++)
    {
        totaltat=totaltat+process[i].tat;
        totalwt=totalwt+process[i].wt;
    }
    printf("Process\tAT\tBT\tCT\tTAT\tWT\t\n\n");
    for(i=0;i<n;i++)
    {
        printf("P%d\t%d\t%d\t%d\t%d\t%d\t\n",i+1,process[i].at,process[i].bt,process[i].ct,process[i].tat,process[i].wt);
    }
    printf("Average tat=%f\n",totaltat/n);
    printf("Average wt=%f\n",totalwt/n);
    printf("0");
    for(i=0;i<n;i++)
    {
        printf("--------");
    }
    printf("\n");
    for(i=0;i<n;i++)
    {
        printf("P%d ",i+1);
    }
    printf("\n");
    for(i=0;i<n;i++)
    {
        printf("--------");
    }
    printf("\n");
    for(i=0;i<n;i++)
    {
        printf("%d ",process[i].ct);
    }
    printf("\n");
}

FCFS:#include<stdio.h>
struct proc
{
    int at,bt,ct,tat,wt,pid;
};
int main()
{
    int n,sum=0,i,j,k;
    float totaltat=0,totalwt=0;
    struct proc process[30],temp;
    
    printf("enter no of process:");
    scanf("%d",&n);
    
    for(i=0;i<n;i++)
    { 
        process[i].pid = i + 1;
        printf("Process %d:\n", process[i].pid);
        printf("enter arrival time:");
        scanf("%d",&process[i].at);
         printf("enter burst time:");
        scanf("%d",&process[i].bt);
    }
    for(i=0;i<n-1;i++)
    {
        for(j=0;j<n-i-1;j++)
        {
            if(process[j].at>process[j+1].at)
            {
               temp=process[j];
                process[j]=process[j+1];
                process[j+1]=temp;
            }
        }
    }
        sum=process[0].at;
        for(j=0;j<n;j++)
        {
             if (sum < process[j].at) {
            sum = process[j].at;  
        }
            sum=sum+process[j].bt;
            process[j].ct=sum;
        }
        for(k=0;k<n;k++)
        {
            process[k].tat=process[k].ct-process[k].at;
            process[k].wt=process[k].tat-process[k].bt;
        }
        for(i=0;i<n;i++)
        {
            totaltat=totaltat+process[i].tat;
            totalwt=totalwt+process[i].wt;
        }
        printf("Process\tAT\tBT\tCT\tTAT\tWT\t\n\n");
        for(i=0;i<n;i++)
        {
            printf("P%d\t%d\t%d\t%d\t%d\t%d\t\n",process[i].pid,process[i].at,process[i].bt,process[i].ct,process[i].tat,process[i].wt);
        }
        printf("GANTT CHART\n");
        printf("0");
        for(i=0;i<n;i++)
        {
            printf("-----");
        }
        printf("\n");
        for(i=0;i<n;i++)
        {
            printf("P%d ", process[i].pid);
        }
        printf("\n");
        for(i=0;i<n;i++)
        {
            printf("-----");
        }
        printf("\n");
        for(i=0;i<n;i++)
        {
            printf("%d ",process[i].ct);
        }
}
