EXP-12(disk scheduling):
#include <stdio.h>
#include <stdlib.h>
 
void FCFS(int request[], int n, int head) {
   int total_seek = 0;
   printf("FCFS Disk Scheduling\n");
   for (int i = 0; i < n; i++) {
       printf("Disk head moves from %d to %d with seek %d\n", head, request[i], abs(request[i] - head));
       total_seek += abs(request[i] - head);
       head = request[i];
   }
   printf("Total seek time is %d\n", total_seek);
   printf("Average seek time is %.2f\n", (float)total_seek / n);
}
 
void SSTF(int request[], int n, int head) {
   int total_seek = 0, completed[n], min_index, seek;
   for (int i = 0; i < n; i++) completed[i] = 0;
 
   printf("\nSSTF Disk Scheduling\n");
   for (int i = 0; i < n; i++) {
       min_index = -1;
       for (int j = 0; j < n; j++) {
           if (!completed[j] && (min_index == -1 || abs(request[j] - head) < abs(request[min_index] - head))) {
               min_index = j;
           }
       }
       seek = abs(request[min_index] - head);
       printf("Disk head moves from %d to %d with seek %d\n", head, request[min_index], seek);
       total_seek += seek;
       head = request[min_index];
       completed[min_index] = 1;
   }
   printf("Total seek time is %d\n", total_seek);
   printf("Average seek time is %.2f\n", (float)total_seek / n);
}
 
void SCAN(int request[], int n, int head, int max_range) {
   int total_seek = 0;
   int i, j, seek, pos, direction = 1; // direction = 1 for right, -1 for left
 
   // Sort the requests array in ascending order
   for (i = 0; i < n - 1; i++) {
       for (j = i + 1; j < n; j++) {
           if (request[i] > request[j]) {
               int temp = request[i];
               request[i] = request[j];
               request[j] = temp;
           }
       }
   }
 
   // Find the starting position in sorted request where the head is currently located
   for (i = 0; i < n; i++) {
       if (request[i] >= head) {
           pos = i; // Index where the head should start servicing requests
           break;
       }
   }
 
   printf("\nSCAN Disk Scheduling\n");
 
   // Move towards the right (higher numbered cylinders)
   for (i = pos; i < n; i++) {
       printf("Disk head moves from %d to %d with seek %d\n", head, request[i], abs(request[i] - head));
       seek = abs(request[i] - head);
       total_seek += seek;
       head = request[i];
   }
 
   // After reaching the end, move to the maximum range
   if (head < max_range - 1) {
       printf("Disk head moves from %d to %d with seek %d\n", head, max_range - 1, abs(max_range - 1 - head));
       seek = abs(max_range - 1 - head);
       total_seek += seek;
       head = max_range - 1;
   }
 
   // Move towards the left (lower numbered cylinders)
   for (i = pos - 1; i >= 0; i--) {
       printf("Disk head moves from %d to %d with seek %d\n", head, request[i], abs(request[i] - head));
       seek = abs(request[i] - head);
       total_seek += seek;
       head = request[i];
   }
 
   printf("Total seek time is %d\n", total_seek);
   printf("Average seek time is %.2f\n", (float)total_seek / n);
}
 
 
void CLOOK(int request[], int n, int head) {
   int total_seek = 0;
   printf("\nC-LOOK Disk Scheduling\n");
 
   for (int i = 0; i < n; i++) {
       if (request[i] >= head) {
           printf("Disk head moves from %d to %d with seek %d\n", head, request[i], abs(request[i] - head));
           total_seek += abs(request[i] - head);
           head = request[i];
       }
   }
   for (int i = 0; i < n; i++) {
       if (request[i] < head) {
           printf("Disk head moves from %d to %d with seek %d\n", head, request[i], abs(request[i] - head));
           total_seek += abs(request[i] - head);
           head = request[i];
       }
   }
 
   printf("Total seek time is %d\n", total_seek);
   printf("Average seek time is %.2f\n", (float)total_seek / n);
}
 
int main() {
   int max_range, size, head;
   
   printf("Enter the max range of disk: ");
   scanf("%d", &max_range);
   
   printf("Enter the size of queue request: ");
   scanf("%d", &size);
   
   int request[size];
   printf("Enter the queue of disk positions to be read: ");
   for (int i = 0; i < size; i++) {
       scanf("%d", &request[i]);
   }
   
   printf("Enter the initial head position: ");
   scanf("%d", &head);
 
   // Running all algorithms
   FCFS(request, size, head);
   SSTF(request, size, head);
   SCAN(request, size, head, max_range);
   CLOOK(request, size, head);
 
   return 0;
}
