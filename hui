EXP 5: FIRST, FOLLOW SETS:
CODE:
#include<stdio.h>
#include<math.h>
#include<string.h>
#include<ctype.h>
#include<stdlib.h>
int n,m=0,p,i=0,j=0; char a[10][10],f[10]; void follow(char c); void first(char c);
int main(){

int i,z; char c,ch;
printf("Enter the no of productions:\n"); scanf("%d",&n);
printf("Enter the productions:\n"); for(i=0;i<n;i++) scanf("%s%c",a[i],&ch);
do{ m=0;
printf("Enter the elemets whose first & follow is to be found:"); scanf("%c",&c);
first(c); printf("First(%c)={",c); for(i=0;i<m;i++) printf("%c",f[i]);
printf("}\n");
strcpy(f," "); m=0;
follow(c); printf("Follow(%c)={",c);
for(i=0;i<m;i++) printf("%c",f[i]);
printf("}\n");
printf("Continue(0/1)?");
scanf("%d%c",&z,&ch);
}while(z==1);
return(0);
}
void first(char c)
{
int k; if(!isupper(c)) f[m++]=c; for(k=0;k<n;k++)
{ if(a[k][0]==c)//TERMINAL
{
if(a[k][2]=='$')
follow(a[k][0]);
else if(islower(a[k][2]))//TERMINAL
f[m++]=a[k][2];
else
first(a[k][2]);
}
}
}
void follow(char c)
{ if(a[0][0]==c)
f[m++]='$';
for(i=0;i<n;i++)
{
for(j=2;j<strlen(a[i]);j++)
{
if(a[i][j]==c)
{
if(a[i][j+1]!='\0')
first(a[i][j+1]); if(a[i][j+1]=='\0' && c!=a[i][0]) follow(a[i][0]);
}
}
}
}
-------------------------------------------------------------------
EXP 6:LL(1) PARSER:
CODE:
table={'E':{'id':'TR','(':'TR'},'R':{'+':'+TR',')':'e','$':'e'},'T':{'id':'FY','(':'FY'},'Y':{'+':'e','*':'*FY',')':'e','$':'e'},'F':{'id':'id','(':'(E)'}
}
inp='id + id * id $'
w=inp.split(' ')
i=0
word=w[i]
stack=[]
stack.append('$')
stack.append('E')
focus=stack[1]
terminal=['*','+','*','id','(',')','e','-','$']
while(focus):
print('f',focus)
print('w',word)
if(focus=='$' and word=='$'):
print('input string is valid')
break
elif(focus in terminal):
if(focus == word):
print('reduce')
stack.pop()
s=len(stack)-1
focus=stack[s]
i=i+1
word=w[i]
else:
e=stack.pop()
print(table[e])
if(word not in table[e]):
print('error')
break;
if(table[e][word]):

right=table[e][word]
if(right=='id'):
stack.append('id')
else:
for j in range(len(right)-1,-1,-1):
if(right[j]!='e'):
stack.append(right[j])
print(stack)
s=len(stack)-1
focus=stack[s]
('f', 'E')
('w', 'id')
{'(': 'TR', 'id': 'TR'}
['$', 'R', 'T']
('f', 'T')
('w', 'id')
{'(': 'FY', 'id': 'FY'}
['$', 'R', 'Y', 'F']
('f', 'F')
('w', 'id')
{'(': '(E)', 'id': 'id'}
['$', 'R', 'Y', 'id']
('f', 'id')
('w', 'id')
reduce
('f', 'Y')
('w', '+')
{')': 'e', '+': 'e', '*': '*FY', '$': 'e'}
['$', 'R']
('f', 'R')
('w', '+')
{')': 'e', '+': '+TR', '$': 'e'}
['$', 'R', 'T', '+']
('f', '+')
('w', '+')
reduce
('f', 'T')
('w', 'id')
{'(': 'FY', 'id': 'FY'}
['$', 'R', 'Y', 'F']
('f', 'F')
('w', 'id')
{'(': '(E)', 'id': 'id'}
['$', 'R', 'Y', 'id']
('f', 'id')
('w', 'id')
reduce
('f', 'Y')
('w', '*')
{')': 'e', '+': 'e', '*': '*FY', '$': 'e'}
['$', 'R', 'Y', 'F', '*']

('f', '*')
('w', '*')
reduce
('f', 'F')
('w', 'id')
{'(': '(E)', 'id': 'id'}
['$', 'R', 'Y', 'id']
('f', 'id')
('w', 'id')
reduce
('f', 'Y')
('w', '$')
{')': 'e', '+': 'e', '*': '*FY', '$': 'e'}
['$', 'R']
('f', 'R')
('w', '$')
{')': 'e', '+': '+TR', '$': 'e'}
['$']
('f', '$')
('w', '$')
input string is valid
-------------------------------------------------------------------
EXP 7: LR(1) PARSER:
CODE:
ACTION = {0 : {'id' : 5, '(' : 4},1 : {'+' : 6, '$' : '*'}, 2 : {'+' : -2, '*' : 7, ')' : -2, '$' : -2},3 : {'+' : -4, '*' : -4, ')' : -4, '$' : -4}, 4 :
{'id' : 5, '(' : 4},5 : {'+' : -6, '*' : -6, ')' : -6, '$' : -6},6 : {'id' : 5, '(' : 4},7 : {'id' : 5, '(' : 4},8 : {'+' : 6, ')' : 11},9 : {'+' : -1, '*' : 7,
')' : -1, '$' : -1},10 : {'+' : -3, '*' : -3, ')' : -3, '$' : -3},11 : {'+' : -5, '*' : -5, ')' : -5, '$' : -5}}
GOTO = {0 : {'E' : 1, 'T' : 2, 'F' : 3},4 : {'E' : 8, 'T' : 2, 'F' : 3},6 : {'T' : 9, 'F' : 3},7 : {'F' : 10}}
GRAMMAR = [None,('E' , ['E', '+', 'T']),('E' , ['T']),('T' , ['T' , '*', 'F']),('T' , ['F']),('F' , ['(', 'E', ')']),('F' , ['id'])]
sentence = input("Enter the statement: ").strip().split()
stack = ['$', 0]
i = 0
while True:
if i >= len(sentence) or sentence[i] not in ACTION[stack[-1]]:
print("Failed!!")
break
if ACTION[stack[-1]][sentence[i]] == '*':
print("Success!!")
break
elif ACTION[stack[-1]][sentence[i]] < 0:
A, B = GRAMMAR[-ACTION[stack[-1]][sentence[i]]]
for _ in range(2*len(B)):
stack.pop()
stack.append(A)
stack.append(GOTO[stack[-2]][A])
else:
stack.append(sentence[i])
stack.append(ACTION[stack[-2]][sentence[i]])
i += 1
SAMPLE INPUT AND OUTPUT:
Enter the statement: id + id * id + ( id + id ) $
Success!!
Enter the statement: ( id + id ) * id $

Success!!
Enter the statement: ( ( id + id ) * ( id + id ) * id ) * ( id + id ) $
Success!!
Enter the statement: ( id + id ) * id * id + id + id $
Success!!
Fail Cases
Enter the statement: ( id + id ) * id * id + id id $
Failed!!
-------------------------------------------------------------------
EXP 8: IF TO SWITCH:
CODE:
(i) LEX PROG:
%{
#include<stdio.h>
#include "y.tab.h"
extern int yylval;
%}
%%
[ /t] ;
"if" return IF;
"else" return ELSE;
"printf" return PRINTF;
[a-zA-Z%][a-zA-Z0-9+]* {yylval = strdup(yytext); return ID;}
"{" return OB;
"}" return CB;
"(" return OP;
")" return CP;
[0-9]+ {yylval = atoi(yytext); return NUM;}
"==" return EQ;
";" return SC;
"," return COM;
\" {yylval = strdup(yytext);return QUOT;}
. return yytext[0];
%%
(ii) YACC PROG:
%{
#include<stdio.h>
int cnt=0;
%}
%token NUM IF ELSE ELIF PRINTF ID OB CB OP CP SC COM QUOT EQ
%start S
%%
S: if elif | if else {printf("VALID PROG!");} ;
if: IF OP ID EQ NUM CP {printf("switch(%s)\n{\ncase %d:",$3,cnt);} text;
elif:elif elif | ELSE IF OP ID EQ NUM CP {cnt++; printf("case %d:",cnt);} text | else;
else: ELSE {printf("default:");} def ;
text: PRINTF OP QUOT ID QUOT COM ID CP SC {printf("printf(%s%s%s,%s);",$3,$4,$5,$7);};
def: PRINTF OP QUOT ID QUOT CP SC {printf("printf(%s%s%s);\n}",$3,$4,$5);};
%%
yyerror()
{
printf("Error!");
}

main()
{
yyparse();
}
INPUT FILE: (inp.txt)
if(a==0)
printf("%d",a);
else if(a==1)
printf("%d",a+1);
else if(a==2)
printf("%d",a+2);
else
printf("default");
-------------------------------------------------------------------
EXP 9A: THREE ADDRESS CODE:
CODE:
(i)LEX PROG:
%{
#include<stdio.h>
#include "y.tab.h"
extern int yylval;
%}
%%
[ \t\n] ;
[0-9]+ {yylval=strdup(yytext); return NUM;}
[_a-zA-Z][_0-9a-zA-Z]* {yylval=strdup(yytext); return ID;}
"+" {yylval=strdup(yytext);return ADD;}
"-" {yylval=strdup(yytext);return SUB;}
"*" {yylval=strdup(yytext);return MUL;}
"/" {yylval=strdup(yytext);return DIV;}
">" {yylval=strdup(yytext);return GT;}
"<" {yylval=strdup(yytext);return LT;}
"=" {yylval=strdup(yytext);return EQ;}
";" {return SC;}
"," {return C0M;}
"{" {return OB;}

"}" {return CB;}
"(" {return OP;}
")" {return CP;}
. return yytext[0];
%%
(ii)YACC PROG:
%{
#include "y.tab.h"
#include <stdio.h>
count=1;
%}
%token ID FS GT LT PL AK BS MI EQ AD OR XR MD IV QM CN SC CM OB CB OP CP IC
%%
S: statements {printf("\n\nvalid!!\n\n");} ;
statements: statement statements | statement ;
statement: ID EQ E {printf("%s = %s\n", $1, $3);};
E: E PL T {printf("t%d = %s %s %s\n", count, $1, $2, $3); sprintf($$, "t%d", count); count++;} | value {$$ = $1;}
| E MI T {printf("t%d = %s %s %s\n", count, $1, $2, $3); sprintf($$, "t%d", count); count++;} | value {$$ = $1;}
| T ;
T: T AK F {printf("t%d = %s %s %s\n", count, $1, $2, $3); sprintf($$, "t%d", count); count++;} | value {$$ = $1;}
| T BS F {printf("t%d = %s %s %s\n", count, $1, $2, $3); sprintf($$, "t%d", count); count++;} | value {$$ = $1;}
| F ;
F: OP E CP {$$ = $2;} | value {$$ = $1;};
value: IC | ID {$$ = $1;};
operator: PL | AK | MI | BS {$$ = $1;};
%%
void yyerror(){
printf("Invalid Syntax!");
}
int main(){
yyparse();
return 0;
}
INPUT FILE:(inp.txt)
a=b+c*d
OUTPUT:
t1 = c * d
t2 = b + t1
a = t2
valid!!
-------------------------------------------------------------------
EXP 9B: POSTFIX EXP:
CODE:
(i)LEX PROG:
%{
#include<stdio.h>

#include "y.tab.h"
extern int yylval;
%}
%%
[0-9]+ {yylval = atoi(yytext); return NUM;}
[a-z][a-zA-Z]* {yylval=strdup(yytext);return ID;}
[\n\t] return 0;
. return yytext[0];
%%
yywrap() {return 1;}
(ii)YACC PROG:
%{
#include <stdio.h>
#include <stdlib.h>
%}
%token NUM ID
%left '+''-'
%left '*''/'
%%
start:T;
T: T'+'T {printf("+");}
| T'-'T {printf("-"); }
| T'*'T {printf("*"); }
| T'/'T {printf("/");}
| NUM {printf("%d",$1);}
| ID {printf("%s",$1);}
;
%%
int main()
{
printf("\nEnter expression:");
yyparse();
return 0;
}
int yyerror()
{
printf("Error");
}
INPUT:
a+b*c
OUTPUT:
abc*+
-------------------------------------------------------------------
EXP 10: COMMON SUB EXP ELIMINATION:
CODE:
import java.io.*;
import java.util.*;
import java.lang.*;
class mod
{
public static void main(String args[])throws IOException
{
String s,temp;

Scanner sc= new Scanner(System.in);
System.out.println("Enter the size");
int size=sc.nextInt();
String arr[][]=new String[size][2];
int flag=0,index=0;
BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream("input.txt")));
for(;(s=br.readLine())!=null;flag=0)
{
arr[index][0]=s.substring(0,s.indexOf("="));
arr[index][1]=s.substring(s.indexOf("=")+1);
index++;
}
for(int i=1;i<arr.length;i++)
{
for(int j=i-1;j>=0;j--)
{
if(arr[i][1].equals(arr[j][1]))
{
arr[i][1]=arr[j][0];
break;
}
}
}
for(int i=0;i<arr.length;i++)
{
System.out.println(arr[i][0]+"="+arr[i][1]);
}
}
}
INPUT FILE:(input.txt)
a=b
b=a+e*f
c=b
d=a+e*f
-------------------------------------------------------------------
EXP 11: CODE GENERATION(machine lang):
CODE:
(i) LEX PROG:
%{
#include<stdio.h>
#include "y.tab.h"
extern int yylval;
%}
%%

[0-9]+ {yylval=strdup(yytext); return IC;}
[_a-zA-Z][_0-9a-zA-Z]* {yylval=strdup(yytext); return ID;}
"+" {yylval=strdup(yytext);return PL;}
"-" {yylval=strdup(yytext);return MI;}
"*" {yylval=strdup(yytext);return AK;}
"/" {yylval=strdup(yytext);return BS;}
"\\" {yylval=strdup(yytext);return FS;}
">" {yylval=strdup(yytext);return GT;}
"<" {yylval=strdup(yytext);return LT;}
"=" {yylval=strdup(yytext);return EQ;}
"&" {yylval=strdup(yytext);return AD;}
"|" {yylval=strdup(yytext);return OR;}
"^" {yylval=strdup(yytext);return XR;}
"%" {yylval=strdup(yytext);return MD;}
"~" {yylval=strdup(yytext);return IV;}
"?" {yylval=strdup(yytext);return QM;}
":" {yylval=strdup(yytext);return CN;}
";" {return SC;}
"," {return CM;}
"{" {return OB;}
"}" {return CB;}
"(" {return OP;}
")" {return CP;}
%%
(ii)YACC PROG:
%{
#include "y.tab.h"
#include <stdio.h>
count=1;
%}
%token ID FS GT LT PL AK BS MI EQ AD OR XR MD IV QM CN SC CM OB CB OP CP IC
%%
S: statements {printf("\n\nvalid!!\n\n");} ;
statements: statement statements | statement ;
statement: ID EQ E SC {printf("STR[%s], %s\n\n", $1, $3);};
E: value operator value {
$$=$1;
if (!strcmp($2, "+"))
printf("ADD %s, %s\n", $1, $3);
else if (!strcmp($2, "-"))
printf("SUB %s, %s\n", $1, $3);
else if (!strcmp($2, "*"))
printf("MUL %s, %s\n", $1, $3);
else if (!strcmp($2, "/"))
printf("DIV %s, %s\n", $1, $3);
};
value: IC {printf("LOAD R%d, %s\n", count, $1); sprintf($$, "R%d", count++);}
| ID {printf("LOAD R%d, [%s]\n", count, $1); sprintf($$, "R%d", count++);};
operator: PL | AK | MI | BS {$$ = $1;};
%%
void yyerror(){

printf("Invalid Syntax!");
}
int main(){
yyparse();
return 0;
}
INPUT FILE (input.txt):
a=b+c;
c=a*d;
-------------------------------------------------------------------
12.LOCAL LIST SCHEDULING: (Using Python)
from collections import defaultdict, Counter, deque
from heapq import *
# get delay of each instruction
delay = {}
print("Enter the operations and cost: ")
while True:
s = input()
if not s: break
i, c = s.split()
delay[i] = int(c)
# get dependency graph as input
successors = defaultdict(list)
predecessors = defaultdict(list)
in_degree = Counter()
out_degree = Counter()
print("Enter the edges: ")
while True:
s = input()
if not s: break
u, v = s.split()
successors[u].append(v)
predecessors[v].append(u)
in_degree[v] += 1
out_degree[u] += 1
# calculate priority
queue = deque([i for i in predecessors if not successors[i]])
priority = Counter()
while queue:
node = queue.popleft()
priority[node] = max(priority[node], delay[node])
for predecessor in predecessors[node]:
priority[predecessor] = max(priority[predecessor], priority[node]+delay[predecessor])
out_degree[predecessor] -= 1
if not out_degree[predecessor]:
queue.append(predecessor)
# local list scheduling
cycle = 1
ready = [(-priority[op], op) for op in delay if not in_degree[op]]
heapify(ready)

active = []
while ready or active:
to_remove = set()
for t,op in active:
if t+delay[op] <= cycle:
to_remove.add(op)
for successor in successors[op]:
in_degree[successor] -= 1
if not in_degree[successor]:
heappush(ready, (-priority[successor], successor))
active = [(t, op) for t,op in active if op not in to_remove]
print(f"{cycle} [{' '.join(op for p,op in ready)}] [{f' '.join(op for t,op in active)}]")
if ready:
p,op = heappop(ready)
active.append((cycle, op))
cycle += 1
print(f"Total cycles: {cycle}")
"""
Enter the operations and cost:
a 3
b 1
c 3
d 2
e 3
f 2
g 3
h 2
i 3
Enter the edges:
a b
b d
c d
d f
e f
f h
g h
h i
1 [a c e g] []
2 [c g e] [a]
3 [e g] [a c]
4 [b g]
